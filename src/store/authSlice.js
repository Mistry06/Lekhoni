import { createSlice } from "@reduxjs/toolkit";

const initialState = {
    status: false, // Indicates if the user is currently authenticated (logged in)
    userData: null, // Holds the user object (e.g., { $id: '...', name: '...', email: '...' })
};

const authSlice = createSlice({
    name: "auth", // The name of this slice in the Redux store
    initialState,
    reducers: {
        // Reducer for when a user successfully logs in
        login: (state, action) => {
            console.log("authSlice.js: login reducer called.");
            console.log("authSlice.js: action.payload received:", action.payload);
            state.status = true; // Set authentication status to true
            state.userData = action.payload.userData; // Store the user data
            console.log("authSlice.js: state.userData after login (SUCCESS):", state.userData);
        },
        // Reducer for when a user logs out
        logout: (state) => {
            console.log("authSlice.js: logout reducer called.");
            state.status = false; // Set authentication status to false
            state.userData = null; // Clear user data
        },
        // Reducer for updating parts of the user data (e.g., after name/email change)
        updateUserData: (state, action) => {
            console.log("authSlice.js: updateUserData reducer called.");
            // Merge the new data (action.payload) into the existing userData
            // This is useful for partial updates, like just changing the name or email.
            state.userData = { ...state.userData, ...action.payload };
            console.log("authSlice.js: state.userData after update:", state.userData);
        }
    },
});

// Export the action creators generated by createSlice
export const { login, logout, updateUserData } = authSlice.actions;

// Export the reducer function
export default authSlice.reducer;